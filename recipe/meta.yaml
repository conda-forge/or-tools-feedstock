{% set version = "9.6" %}

{% set libs = ["ortools", "ortools_flatzinc"] %}
# many, many more headers; this just covers one from main namespace and a nested one
{% set headers = ["ortools_export.h", "ortools/algorithms/dense_doubly_linked_list.h"] %}
{% set binaries = ["fzn-ortools", "sat_runner", "solve"] %}

package:
  name: or-tools-package
  version: {{ version }}

source:
  url: https://github.com/google/or-tools/archive/v{{ version }}.tar.gz
  sha256: bc4b07dc9c23f0cca43b1f5c889f08a59c8f2515836b03d4cc7e0f8f2c879234
  patches:
    - patches/0001-fail-loudly-in-sample-program-if-scip-not-found.patch
    - patches/0002-depend-on-libortools-for-python-bindings.patch
    - patches/0003-avoid-host.cmake.patch

# The meta package

build:
  number: 4
  skip: true  # [not linux]

requirements:
  build:
    - {{ compiler('c') }}
    - {{ stdlib("c") }}
    - {{ compiler('cxx') }}
    - cmake
    - ninja
    - pkg-config
    - libprotobuf  # [build_platform != target_platform]
  host:
    # eigen does not have a run-export but is header-only
    - eigen
    - libabseil
    - libprotobuf
    - re2
    # not available on aarch/ppc yet
    - scip  # [not (aarch64 or ppc64le)]
    - zlib
    # coin or deps
    - coin-or-utils
    - coin-or-osi
    - coin-or-clp
    - coin-or-cgl
    - coin-or-cbc

outputs:
  # The core package
  - name: libortools
    script: install-cpp.sh
    build:
      run_exports:
        - {{ pin_subpackage('libortools', max_pin='x.x') }}
    requirements:
      build:
        - cmake
        # for strong run export
        - {{ compiler('c') }}
        - {{ stdlib("c") }}
        - {{ compiler('cxx') }}
      host:
        # these are only here for proper run-exports
        - libabseil
        - libprotobuf
        - re2
        - scip  # [not (aarch64 or ppc64le)]
        - zlib
        - coin-or-utils
        - coin-or-osi
        - coin-or-clp
        - coin-or-cgl
        - coin-or-cbc
      run:
        # header-only without run-export, but ortoolsConfig.cmake really wants it, see
        # https://github.com/google/or-tools/blob/v9.6/cmake/ortoolsConfig.cmake.in#L64
        - eigen
      run_constrained:
        # make sure we don't co-install with old version of previous package name
        - ortools-cpp ={{ version }}

    test:
      commands:
        # libraries
        {% for each_lib in libs %}
        # presence of shared libs
        - test -f $PREFIX/lib/lib{{ each_lib }}.so              # [linux]

        # absence of static libs (unix)
        - test ! -f $PREFIX/lib/lib{{ each_lib }}.a             # [unix]
        {% endfor %}

        # presence of headers
        {% for each_header in headers %}
        - test -f $PREFIX/include/{{ each_header }} || (echo "{{ each_header }} not found" && exit 1)  # [unix]
        {% endfor %}

        # absence of binaries
        {% for each_bin in binaries %}
        - test ! -f $PREFIX/bin/{{ each_bin }}                  # [unix]
        {% endfor %}

        # CMake metadata
        - test -f $PREFIX/lib/cmake/ortools/ortoolsTargets.cmake
        - test -f $PREFIX/lib/cmake/ortools/ortoolsConfig.cmake

  # originally for compatibility with previous output nomenclature,
  # now used for binaries, c.f. thrift-cpp feedstock, resp.
  # https://github.com/conda-forge/conda-forge.github.io/issues/1073#issuecomment-1228192146
  - name: ortools-cpp
    script: install-cpp.sh
    build:
      run_exports:
        - {{ pin_subpackage('libortools', max_pin='x.x') }}
    requirements:
      build:
        - cmake
        # for strong run export
        - {{ compiler('c') }}
        - {{ stdlib("c") }}
        - {{ compiler('cxx') }}
      host:
        - {{ pin_subpackage('libortools', exact=True) }}
        # for proper run-exports
        - libabseil
        - libprotobuf
      run:
        - {{ pin_subpackage('libortools', exact=True) }}
    test:
      requires:
        # cmake needs compiler to be able to run package detection, see
        # https://discourse.cmake.org/t/questions-about-find-package-cli-msvc/6194
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      files:
        - cmake_test/
      commands:
        # presence of binaries
        {% for each_bin in binaries %}
        - test -f $PREFIX/bin/{{ each_bin }}                    # [unix]
        {% endfor %}

        # share
        - test -d $PREFIX/share/minizinc/ortools                # [unix]
        - test -d $PREFIX/share/minizinc/solvers                # [unix]

        # test CMake integration, i.e. find_package(ortools)
        - cd cmake_test
        - cmake -GNinja $CMAKE_ARGS .   # [unix]
        - cmake -GNinja %CMAKE_ARGS% .  # [win]

  # this package exists primarily to be able to test scip integration without
  # polluting the other outputs (and $CONDA_PREFIX/bin) with useless sample binaries
  - name: ortools-samples
    script: install-cpp.sh
    requirements:
      build:
        - cmake
        # for strong run export
        - {{ compiler('c') }}
        - {{ stdlib("c") }}
        - {{ compiler('cxx') }}
      host:
        - {{ pin_subpackage('ortools-cpp', exact=True) }}
        - libabseil
        - libprotobuf
      run:
        - {{ pin_subpackage('ortools-cpp', exact=True) }}
        # it seems that conda-build does not correctly apply run-exports
        # for dependencies added through `pin_subpackage`...
        - {{ pin_subpackage('libortools', max_pin='x.x') }}
    test:
      commands:
        # run sample program for scip integration
        - $CONDA_PREFIX/bin/simple_mip_program  # [not (aarch64 or ppc64le)]

  # The python package.
  - name: ortools-python
    script: build-python.sh
    build:
      ignore_run_exports_from:
        # those are just in host to appease the CMake build script
        - coin-or-utils
        - coin-or-osi
        - coin-or-clp
        - coin-or-cgl
        - coin-or-cbc
        - re2
        - zlib
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ stdlib("c") }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - pkg-config
        - swig >=4.0
        - libprotobuf  # [build_platform != target_platform]
      host:
        # find_package(ortools) wants to find the binaries as well
        - {{ pin_subpackage('ortools-cpp', exact=True) }}
        - python
        - pip
        - setuptools
        - wheel
        - absl-py >=0.13
        - numpy
        - mypy-protobuf
        - protobuf >=4.21.12
        - scipy >=1.10
        # match protobuf version from libortools to help solver
        - libprotobuf
        # other C/C++ deps
        - eigen
        - libabseil
        - pybind11
        - re2
        - zlib
        # coin or deps
        - coin-or-utils
        - coin-or-osi
        - coin-or-clp
        - coin-or-cgl
        - coin-or-cbc
      run:
        - {{ pin_subpackage('libortools', exact=True) }}
        - python
        - absl-py >=0.13
        - mypy-protobuf
        - protobuf >=4.21.12
        - scipy >=1.10
        # Source: https://github.com/google/or-tools/blob/stable/ortools/python/setup.py.in#L44

    test:
      imports:
        - ortools
        - ortools.algorithms.pywrapknapsack_solver
        - ortools.constraint_solver.pywrapcp
        - ortools.constraint_solver.routing_enums_pb2
        - ortools.glop.parameters_pb2
        - ortools.graph.flow_problem_pb2
        - ortools.graph.python
        - ortools.init.pywrapinit
        - ortools.linear_solver.linear_solver_pb2
        - ortools.linear_solver.python
        - ortools.linear_solver.python.model_builder
        - ortools.linear_solver.pywraplp
        - ortools.packing.multiple_dimensions_bin_packing_pb2
        - ortools.packing.vector_bin_packing_pb2
        - ortools.pdlp.python
        - ortools.sat.boolean_problem_pb2
        - ortools.sat.cp_model_pb2
        - ortools.sat.cp_model_service_pb2
        - ortools.sat.python
        - ortools.sat.python.cp_model
        - ortools.sat.sat_parameters_pb2
        - ortools.scheduling.course_scheduling_pb2
        - ortools.scheduling.jobshop_scheduling_pb2
        - ortools.scheduling.pywraprcpsp
        - ortools.scheduling.rcpsp_pb2
        - ortools.util.optional_boolean_pb2
        - ortools.util.python
      commands:
        - pip check
        - ${PYTHON} cmake/samples/python/sample.py
        - ${PYTHON} ortools/sat/samples/assignment_sat.py
        # check that scip is loadable
        - python -c "from ortools.linear_solver import pywraplp; pywraplp.Solver.CreateSolver('SCIP')"  # [not (aarch64 or ppc64le)]
      requires:
        - pip
      source_files:
        - cmake/samples/python/sample.py
        - ortools/sat/samples/assignment_sat.py

about:
  home: https://developers.google.com/optimization
  license: Apache-2.0
  license_family: Apache
  license_file: LICENSE
  summary: Google Operations Research Tools (or-tools) python package
  description: |
    OR-Tools is an open source software suite for optimization, tuned for tackling
    the world's toughest problems in vehicle routing, flows, integer and linear
    programming, and constraint programming.

    After modeling your problem in the programming language of your choice, you
    can use any of a half dozen solvers to solve it: commercial solvers such as
    Gurobi or CPLEX, or open-source solvers such as SCIP, GLPK, or Google's GLOP
    and award-winning CP-SAT.
  dev_url: https://github.com/google/or-tools

extra:
  recipe-maintainers:
    - wolfv
    - BastianZim
    - h-vetinari
  feedstock-name: or-tools
