{% set version = "9.4" %}

package:
  name: or-tools-package
  version: {{ version }}

source:
  url: https://github.com/google/or-tools/archive/v{{ version }}.tar.gz
  sha256: 180fbc45f6e5ce5ff153bea2df0df59b15346f2a7f8ffbd7cb4aed0fb484b8f6
  patches:
    # minimal fix for https://github.com/google/or-tools/issues/3698
    - patches/0001-ensure-we-re-using-the-right-abseil-macro.patch

# The meta package

build:
  number: 0
  skip: true  # [not (linux or win)]

outputs:
  # The core package
  - name: libortools
    script: build-cpp.sh
    build:
      run_exports:
        - {{ pin_subpackage('libortools', max_pin='x.x') }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake >=3.18
        - ninja
        - pkg-config
      host:
        # eigen does not have a run-export but is header-only
        - eigen
        - libabseil
        - libprotobuf
        - re2
        - zlib
        # coin or deps
        - coin-or-utils
        - coin-or-osi
        - coin-or-clp
        - coin-or-cgl
        - coin-or-cbc
        # Source: https://github.com/google/or-tools/blob/stable/cmake/dependencies/CMakeLists.txt
        - python
      run_constrained:
        - scip =7.0.1
        # make sure we don't co-install with old version of previous package name
        - ortools-cpp ={{ version }}

    test:
      commands:
        - test -f $PREFIX/lib/libortools${SHLIB_EXT}
        - test -f $PREFIX/lib/cmake/ortools/ortoolsTargets.cmake
        - test -f $PREFIX/lib/cmake/ortools/ortoolsConfig.cmake
        - test -f $PREFIX/include/ortools_export.h
        - test -f $PREFIX/include/ortools/algorithms/dense_doubly_linked_list.h

  # for compatibility with previous output "ortools-cpp"
  - name: ortools-cpp
    build:
      run_exports:
        - {{ pin_subpackage('libortools', max_pin='x.x') }}
    requirements:
      host:
        - {{ pin_subpackage('libortools', exact=True) }}
      run:
        - {{ pin_subpackage('libortools', exact=True) }}
    test:
      commands:
        # tested in other outputs
        - echo "hello"

      # The python package.
  - name: ortools-python
    script: build-python.sh

    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake >=3.18
        - git
        - ninja
        - python
        - mypy-protobuf
        - pkg-config
        - setuptools
        - swig >=4.0,<4.1
      host:
        - python
        - pip
        - absl-py >=0.13
        - numpy
        - mypy-protobuf
        - wheel
        # C/C++ deps
        - eigen
        - libabseil
        - libprotobuf
        - pybind11
        - re2
        - zlib
        # coin or deps
        - coin-or-utils
        - coin-or-osi
        - coin-or-clp
        - coin-or-cgl
        - coin-or-cbc
      run:
        - absl-py >=0.13
        - mypy-protobuf
        - {{ pin_compatible('numpy') }}
        - protobuf
        - python
        # Source: https://github.com/google/or-tools/blob/stable/ortools/python/setup.py.in#L44
      run_constrained:
        - scip =7.0.1

    test:
      imports:
        - ortools
        - ortools.linear_solver.pywraplp
      commands:
        - pip check
        - ${PYTHON} cmake/samples/python/sample.py
        - ${PYTHON} ortools/sat/samples/assignment_sat.py
      requires:
        - pip
      source_files:
        - cmake/samples/python/sample.py
        - ortools/sat/samples/assignment_sat.py

about:
  home: https://developers.google.com/optimization
  license: Apache-2.0
  license_family: Apache
  license_file: LICENSE
  summary: Google Operations Research Tools (or-tools) python package
  description: |
    OR-Tools is an open source software suite for optimization, tuned for tackling
    the world's toughest problems in vehicle routing, flows, integer and linear
    programming, and constraint programming.

    After modeling your problem in the programming language of your choice, you
    can use any of a half dozen solvers to solve it: commercial solvers such as
    Gurobi or CPLEX, or open-source solvers such as SCIP, GLPK, or Google's GLOP
    and award-winning CP-SAT.
  dev_url: https://github.com/google/or-tools

extra:
  recipe-maintainers:
    - wolfv
    - BastianZim
    - h-vetinari
  feedstock-name: or-tools
